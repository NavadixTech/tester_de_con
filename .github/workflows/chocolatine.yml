name: chocolatine
run-name: ${{ github.actor }} - ${{ github.workflow }} - ${{ github.ref }}

on:
  push:
    branches-ignore:
      - " ga-ignore-"
  pull_request:
    branches-ignore:
      - " ga-ignore-"

env:
  BANNED_FUNCTIONS: "strcpy strcat gets system"

jobs:
  remove_object_files:
    name: "Remove Object Files"
    runs-on: ubuntu-latest
    if: ${{ github.repository != 'EpitechPGEPromo2029/B-DOP-200-MLN-2-1-chocolatine-sacha.lamour' }}
    steps:
      - uses: actions/checkout@v4

      - name: Find and Remove .o Files
        run: |
          object_files=$(find . -name "*.o")
          if [[ -n "$object_files" ]]; then
            echo "::warning:: Found object files, removing them..."
            echo "$object_files"
            rm -f $object_files
            make clean
          else
            echo "No .o files found."
          fi

  check_coding_style:
    name: "Coding Style Check"
    runs-on: ubuntu-latest
    needs: remove_object_files
    continue-on-error: false
    container:
      image: ghcr.io/epitech/coding-style-checker:latest
    if: ${{ github.repository != 'EpitechPGEPromo2029/B-DOP-200-MLN-2-1-chocolatine-sacha.lamour' }}
    steps:
      - uses: actions/checkout@v4
      - id: check_coding_style
        run: |
          bash -c '
            check.sh $(pwd) $(pwd)
            CODING_STYLE_ERRORS=$(cat $(pwd)/coding-style-reports.log)
            while IFS= read -r ERRORS; do
              array=(`echo $ERRORS | sed "s/:/\\n/g"`)
              echo "::error file=${array[1]#./},title=${array[3]#./} coding style errors detected: ${array[2]#./}::${array[4]#./}"
            done < $(pwd)/coding-style-reports.log
            if [[ -s $(pwd)/coding-style-reports.log ]]; then
              exit 1
            else
              echo No coding style errors detected
            fi
          '

  check_banned_functions:
    name: "Check Banned Functions"
    runs-on: ubuntu-latest
    needs: check_coding_style
    steps:
      - uses: actions/checkout@v4

      - name: Scan for Banned Functions (Root Files Only)
        run: |
          banned=($BANNED_FUNCTIONS)
          found=0
          for file in $(find . -maxdepth 1 -name "*.c"); do
            for func in "${banned[@]}"; do
              if grep -q "$func" "$file"; then
                echo "::error file=$file:: Banned function '$func' detected!"
                found=1
              fi
            done
          done
          if [[ $found -eq 1 ]]; then
            exit 1
          fi

  check_program_compilation:
    name: Check Compilation
    runs-on: ubuntu-latest
    timeout-minutes: 2
    container:
      image: epitechcontent/epitest-docker
    needs: check_banned_functions
    continue-on-error: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@master

      - name: Compile Project
        run: make

      - name: Clean Project
        run: make clean

      - name: Verify Executables
        run: |
          for file in ${{ vars.EXECUTABLES }}; do
             if [ ! -x "$file" ]; then
              echo "File $file does not exist or is not executable"
              exit 1
            fi
          done

  check_memory_leaks:
    name: "Memory Leak Check"
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker
    needs: check_program_compilation
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Valgrind on Executables
        run: |
          make
          found=0
          for file in ${{ vars.EXECUTABLES }}; do
            if [ ! -x "$file" ]; then
              echo "::error:: Executable '$file' not found or not executable!"
              found=1
              continue
            fi
            echo "Running Valgrind on $file..."
            valgrind --leak-check=full --show-leak-kinds=all --error-exitcode=1 "./$file"
            if [[ $? -ne 0 ]]; then
              echo "::error:: Memory leaks detected in $file!"
              found=1
            fi
          done
          if [[ $found -eq 1 ]]; then
            exit 1
          fi

  run_tests:
    name: Run Tests
    runs-on: ubuntu-latest
    continue-on-error: false
    container:
      image: epitechcontent/epitest-docker
    needs: check_program_compilation
    if: ${{ github.repository != 'EpitechPGEPromo2029/B-DOP-200-MLN-2-1-chocolatine-sacha.lamour' }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Tests
        run: |
          make tests_run
          TEST_RESULT=$?
          if [ $TEST_RESULT -ne 0 ]; then
            echo "::error:: Tests failed"
            exit 1
          fi

  push_to_mirror:
    name: Push to Mirror
    runs-on: ubuntu-latest
    needs: run_tests
    if: github.event_name == 'push' && ${{ github.repository != 'EpitechPGEPromo2029/B-DOP-200-MLN-2-1-chocolatine-sacha.lamour' }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url: ${{ vars.MIRROR_URL }}
          ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}
